AWSTemplateFormatVersion: 2010-09-09
Description: CodePipeline pcls
Resources:
  #Pipeline definition
  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: Pipeline
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: AppSource
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: '1'
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                BranchName: main
                ConnectionArn: >-
                  arn:aws:codestar-connections:eu-west-1:823278056251:connection/762b5393-90c9-4e1e-831f-ab55332fae98
                FullRepositoryId: etiennefrei/test-pipeline
        - Name: Build
          Actions:
            - Name: AppBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: AppDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                BucketName: !Ref WebsiteBucket
                Extract: 'true'
              OutputArtifacts: []
              Region: eu-west-1

      Variables:
        - Name: S3_BUCKET
          DefaultValue: !GetAtt WebsiteBucket.WebsiteURL
          Description: Deployment-Bucket
      PipelineType: V2
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket

  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: PipelineRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "codepipeline.amazonaws.com"
            Action: 
              - "sts:AssumeRole"

  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PipelinePolicy
      Roles:
        - !Ref PipelineRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'

          - Effect: Allow
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetBuildBatches
              - codebuild:StartBuildBatch
            Resource: '*'

          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:GetBucketLocation
              - s3:GetBucketAcl
            Resource: '*'

          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: '*'

          - Effect: Allow
            Action:
              - codestar-connections:UseConnection
            Resource: '*'

          - Effect: Allow
            Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: '*'

  #CodeBuild Project to build project   
  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties: 
      Name: CodeBuild
      Description: "CodeBuild project for building Angular project"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: "BUILD_LAMBDA_2GB"
        Image: aws/codebuild/amazonlinux-x86_64-lambda-standard:nodejs18
        Type: "LINUX_LAMBDA_CONTAINER"
      Source: 
        Type: CODEPIPELINE

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodeBuildRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildPolicy
      Roles:
        - !Ref CodeBuildRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*' 

          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
              - codebuild:BatchPutCodeCoverages
            Resource: '*'

          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:GetBucketLocation
              - s3:GetBucketAcl
            Resource: '*'

  #S3 Bucket to host Static Website
  WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  WebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "PublicReadGetObject"
            Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref WebsiteBucket
                - /*

  #S3 Bucket to store artifacts
  ArtifactBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain

  #Event Bridge to invoke Lambda function
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EventBridgeRule
      Description: EventRule
      EventPattern:
        source: 
          - "aws.codepipeline"
        detail-type: 
          - "CodePipeline Stage Execution State Change"
        detail:
          state:
            - "SUCCEEDED"
            - "FAILED"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt GitCommitLambda.Arn
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "GitCommitLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EventRule"
          - "Arn"

  #Lambda function to make Github commits
  GitCommitLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs18.x
      Role: !GetAtt LambdaRole.Arn
      FunctionName: GitCommitLambda
      Handler: index.handler
      Code:
        S3Bucket: angular-deployment
        S3Key: test/lambdaCreateGithubComment.zip
      Description: List Amazon S3 buckets in us-east-1

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: LambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"

  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaPolicy
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'

          - Effect: Allow
            Action:
              - codepipeline:GetPipelineExecution
            Resource: '*'

  #Mail Notification
  NotificationSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: NotificationSNSTopic
      Subscription:
        - Endpoint: "etienne.frei@students.fhnw.ch"
          Protocol: "Email"

  MailNotificationRule:
    Type: 'AWS::CodeStarNotifications::NotificationRule'
    Properties:
      Name: MailNotificationRule
      DetailType: FULL
      Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
      EventTypeIds: 
          - codepipeline-pipeline-pipeline-execution-failed
          - codepipeline-pipeline-pipeline-execution-succeeded
      Targets: 
          - TargetType: SNS 
            TargetAddress: !Ref NotificationSNSTopic